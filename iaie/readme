
iaie = Intel architecture instruction extensions
wip = work in progress


https://en.wikipedia.org/wiki/X86_instruction_listings

simd 有 mmx, sse, avx, 后面替代前面, 学 avx 就行了
avx512 始于 2016, 2019 还没有完全支持它的 cpu (所以目前连 avx 都不用学了?)

CPUID   Pentium+
code path 1. base code path for compatibility with older processors (from either vendor)
code path 2. optimized Intel code path exploiting SSE4 or AVX
code path 3. optimized AMD code path exploiting SSE5

x87             80 bit reg, st0 ~ st7, 8 lvl stack, most mnemonics begin with f
SIMD
    MMX         64 bit reg, mm0 ~ mm7, x87 FPU registers' mantissa part aliase
    3DNow!      amd
    3DNow!+     amd
    SSE         128 bit reg, xmm0 ~ xmm7
    SSE2        intended to fully replace MMX, later added xmm7 ~ xmm15 in 64 bit mode
    SSE3        128 bit reg, xmm0 ~ xmm7 in x86, xmm0 ~ xmm15 in x64
    SSSE3
    SSE4
    SSE5        amd, competitor to SSE4, replaced by XOP, F16C, FMA3, FMA4
    AVX         256 bit reg, ymm0 ~ ymm7 in x86, ymm0 ~ ymm15 in x64; ymm extends xmm like  ax -> eax
    AVX2
    AVX-512     512 bit reg, zmm0 ~ zmm7 in x86, zmm0 ~ zmm31 in x64; zmm extends ymm like eax -> rax
Cryptographic


搜索 x87 FXCH 时看到这本书 <64位微处理器应用编程>, 作者 周明德, 似乎很贴合这里的主题, 就仔细看了看
- 看其语言像是翻译的
- 把 google 给的免费页数看完了 (39 ~ 88, 103 ~ 293 不在试看范围内), 没有一句编程


==================== x87

https://en.wikipedia.org/wiki/Intel_8087

1977, Bruce Ravenel 和 John Palmer 设计了 "传说中的" 栈架构 cpu 和栈寄存器

TODO:
- 找出栈寄存器的好处

FXCH stX makes the x87 stack usable as 7 addressable registers + 1 accumulator (st0)

==================== simd

对并行计算机的分类, 1966, Flynn 分类法
SISD =  Single  Instruction stream  Single  Data stream, 单指令流单数据流
SIMD =  Single  Instruction stream Multiple Data stream, 单指令流多数据流
MISD = Multiple Instruction stream  Single  Data stream, 多指令流单数据流
MIMD = Multiple Instruction stream Multiple Data stream, 多指令流多数据流

一个寄存器, 比如 4 字节 32 位, 保存一个 32 位 4 字节整数, 一直没啥问题
硬件发展了, 寄存器变宽; 应用发展了, 有时要对大量数据应用同样的操作
然后出现一种做法, 把多个相同宽度的数合起来放一个寄存器里, 一个指令对它们同时施加操作
这时候, 同样宽度的寄存器, 保存同样的数值, 根据你如何看它或者对它应用啥指令, 这数值有了两种不同的意义
为了区分, 当你把这个数值看成是若干分量时, 称该数值为向量; 而原来一直没啥问题的单个数值, 现在称为标量

把数值视为向量进行操作的指令称为 simd, 可以看到 simd 说的多数据流指的就是向量里的多个分量

视为单个整量和视为多个分量, 计算时有啥区别? 主要是进位借位的区别, 多个分量需要多个进位, 整量就一个进位

mimd - Intel Xeon Phi

==================== simd/mmx

https://en.wikipedia.org/wiki/MMX_(instruction_set)

intel 把无意义单词 mmx 注册了商标. 首字母缩写词不能注册商标, amd 为了捣乱, 把 mmx 解释为 Matrix Math Extensions
1995, intel 起诉 amd 和 cyrix corp. 误用它的 mmx 商标. amd 和 intel 以如下条件达成和解:
amd 承认 mmx 是 intel 的商标; intel 授予 amd 将 mmx 商标用作技术名, 但不能用作处理器名的权利.

疑问:
- intel 啥时候注册的商标? 该网页开头说 mmx 是 intel 1997 随 P5-based Pentium 引入的
- Extensions 缩写为 x 时, 还属于首字母缩写吗?

mmx 寄存器是 x87 寄存器的别名, 它俩共享 8 个寄存器

==================== simd/sse

https://en.wikipedia.org/wiki/SSE2

- 实现了大部分 mmx 的整数向量操作; mm 寄存器 64 位, xmm 寄存器 128 位
- xmm 是独立寄存器, mm 是 st 的别名
- sse 支持单精度浮点, sse2 支持双精度浮点
- 缓存控制指令, 用来减少处理无限信息流时的缓存污染
- amd 增加 xmm8 ~ xmm15, 仅在 64 位模式下可用, intel 于 2004 也增加了这 8 个
- x87 精度较高, 80 位, 一次处理一个标量; sse2 精度 32/64 位, 一次处理有多个分量的矢量
- 由于兼容, 有可能将现存的 mmx 代码转换为 sse2
- 希望要访问的内存对齐到 16 位
- 使用 mmx 时可能会用到 x87 指令比如 c 函数 pow, 如果没有用 emms 切换状态, 就会损坏寄存器数据; sse2 无此隐患

https://en.wikipedia.org/wiki/SSE3

- work horizontally in a register
- 添加指令 LDDQU 用于减少访问未对齐内存的开销, 并从整体上改善了未对齐加载的性能

https://en.wikipedia.org/wiki/SSSE3

添加 14 个助记符表示的 16 条指令, 可用于 64 位 mm 和 128 位 xmm 寄存器, intel 因此说是 32 条指令

https://en.wikipedia.org/wiki/SSE4

54 instructions sse4 = 47 instructions sse4.1 + 7 instructions sse4.2
amd sse4a = 4 sse4 instructions + 4 new sse instructions, intel 不支持

==================== simd/avx

https://en.wikipedia.org/wiki/Advanced_Vector_Extensions

proposed by Intel in March 2008
first supported by Intel Sandy Bridge, Q1 2011; later on by AMD Bulldozer, Q3 2011

new features, new instructions and a new coding scheme

- 使用 ymm 寄存器时, 传统的 a = a + b 变成了 c = a + b, 两个操作数的值都不会改变
- 不再严格要求对齐
- 支持 128-bit and 256-bit SIMD

https://en.wikipedia.org/wiki/AVX-512

https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/x64-architecture
x64 以如下方式使用宽度更小的寄存器
- rex 前缀启用 sil, dil, bpl, spl; rex 前缀只在 x64 里有效
- 无 rex 前缀时可使用 ah, bh, ch, dh
rax - eax - ax  - al
rsi - esi - si  - sil
r8  - r8d - r8w - r8b

avx512 以如下方式使用宽度更小的寄存器
- avx2 没有 ymm16, sse 没有 xmm16, 这些名字只在 avx512 里有效
- avx512 有 evex 编码, 用 EVEX 编码形式, avx, avx2 可以使用 ymm16 ~ ymm31, sse 可以使用 xmm16 ~ xmm31
zmm0  - ymm0  - xmm0
zmm31 - ymm31 - xmm31




