

==================== intel 的毛病


### 错误的名称

wrong       should be
─────────────────────
mov         copy, set

### 错误的顺序

wrong               should be
──────────────────────────────────────────────────
mov dest, source    mov source, dest (at&t syntax)

### 多余的逗号

mov a, b                        could be
──────────────────────────────────────────────────
mov a, offset b                 mov a offset b
mov a, max b, c                 mov a max b c
mov a, max b, c, d, e, ...      mov a max b c d e ...
mov max a, b, c                 the code is invalid

### 同义词

code, instruction, text

### 寄存器

寄存器让汇编语言更麻烦, 但可能也避免不了.

印象里寄存器别名有下列特征, 不知是否正确. 不重要
- 由于寄存器别名, 代码里的寄存器可能对应好几个 cpu 寄存器, 值是这几个寄存器的组合值
- 所有这些被别名的寄存器都不小于别名的长度, 不会用多个小的寄存器组合成一个大的
- 段寄存器比如 gs, 代码里是 16 位, 实际上可能对应好几个 64 位寄存器? 或者只有通用寄存器有别名?

#### 通用寄存器的命名

bad
    ax, bx, sp, di
good
    st0 ~ st7 (8 names)
even better
    st[0] ~ st[7], or st0 ~ st7 (1 name: st, 8 indices: 0 ~ 7, optional space between st and number)

#### 指令隐含使用寄存器

比如 loop (cx), jz (zf). 可能因为硬件少, 提供不了专用寄存器, 又不想添加指定寄存器的语句.
不过 jz 都把 z 写到名字里了, 还算不算隐含使用?

https://stackoverflow.com/questions/45538021/how-to-know-if-a-register-is-a-general-purpose-register
eax: mul
ebx: xlat
ecx: shl
edx: div
edi: stos
esi: lods
ebp: leave
esp: ret

#### 指令隐含使用寄存器和内存

push 依赖内存, 寄存器 ss 和 sp, 这 3 样存储组成抽象概念 "栈"

#### segment:offset, 内存的分段表示法

用 16 位寄存器保存 20 位地址需要 2 个, 这第 2 个寄存器有两种使用方式
- 只用 4 位. 这时 2 个寄存器组合出唯一 20 位地址
- 用全部 16 位. 以 32 位表达 20 位显然有很多组合方式, 所以会组合出很多重复的 20 位地址

intel 采用第 2 种方式, 2 个寄存器组合出地址的方式是

segment:offset = (16 bits segment << 4) + 16 bits offset = 20 bits address

这个左移在 16 位通用寄存器上做不到, segment:offset 也无法表达 segment * 16 + offset.

intel 用段寄存器保存段地址 segment, 通用寄存器保存或者立即数表达偏移地址 offset.
少数指令接受 segment:offset 形式的立即数, 多数指令只接受 offset 但隐含使用段寄存器.

### 中断

cpu 不断查看中断请求 (轮询), 满足请求, 所以 cpu 决定是否以及如何响应中断请求.
也可以设想一种中断模式, 随时中断无需 cpu 同意. 不过执行这个模式的硬件是不是因此就变成 cpu 了, 尽管它不计算?
是否让 cpu 处理中断, 以及是否让任何人干任何事情, 都会引发信任的问题.
有没有比信任更好的确保过程及结果的方法? 这里不考虑补救, 纠正等事后措施; 8259a, apic 等中断控制器显然也不符合要求.

### 高速缓存

分支预测如果猜中了, 使用高速缓存里的代码, 否则从内存读取代码. 代码无法干涉这种行为, 所以它不影响编程.

现在加了个 pause 指令, 可以提升 spin-wait 的性能, 因为可以帮助减小分支预测出错对性能的影响
https://stackoverflow.com/questions/12894078/what-is-the-purpose-of-the-pause-instruction-in-x86

pause 把分支预测和高速缓存拉入了代码, 编程时不得不考虑, 增加程序员的负担. 要说不用 pause 也照样编程,
只是会错失一个提升性能的机会. cpu 的分支预测是它自己的事情, spin-wait 效率不高应该它自己解决,
不该发明一个指令把负担交给程序员.

### 对齐

虽不常见, 见到时很烦

### todo

lock prefix 用来独占内存

wait 和 cache 有没有关系?


==================== masm 的毛病


### 虎头蛇尾的 comment 语句

comment 可以自定义括号, 但实现的很粗糙
- 定义 1 个字符, 该字符括起来的内容算注释
- 开始和结束的行, 这两个整行都算注释

c++ 原始串字面量, http form data multipart delimiter 等都比它完善

### 怎么 echo 分号?

执行 echo 前先把注释删掉了, 导致 echo 看不到分号及其后的内容

### vararg

宏的变参 vararg 保存的是处理过的参数, 意味着 <1, 2, 3> 用具名参数接收时是 1 个参数, 用 vararg 参数接收时是 3 个


==================== masm 命令行 - 观察双引号导致的一些结果


下面既有从本目录编译的, 也有从 cmdln 目录编译的; 由于比较长所以单独放一节

编译时 ml 6 打印下列错误信息; ml 14 类似, ml 6 的 A4017 = ml 14 的 A4018; 可以看到
- 如果 /Zs 没有完全匹配, 则开始尝试, 原则是单独字母 (Z) + 其它字母
- s 首先被忽略了; 这算啥逻辑? 是不是把单个字母后面的 1 个字母视作空白给忽略掉?
- 尝试时不是 1 次减 1 个字母, cmd, off 等类似 "关键词", 一次减掉
- 这种减法也是奇怪, 如果我弄个以 s 结尾的文件名, 是不是最终它能匹配上 Zs? 没试

ml "-Zs" "cmdln/abc"
 Assembling: cmdln/abc

ml "-Zs " "cmdln/abc"
warning A4017: invalid command-line option : /Z
 Assembling: cmdln/abc

ml "-Zs   " "cmdln/abc"
warning A4017: invalid command-line option : /Z
warning A4017: invalid command-line option : /Z
warning A4017: invalid command-line option : /Z
 Assembling: cmdln/abc

ml "-Zs "abc"
warning A4017: invalid command-line option : /Z abc
warning A4017: invalid command-line option : /Zabc
warning A4017: invalid command-line option : /Zbc
warning A4017: invalid command-line option : /Zc
fatal error A1017: missing source filename

ml "-Zs "coff"
warning A4017: invalid command-line option : /Z coff
warning A4017: invalid command-line option : /Zcoff
warning A4017: invalid command-line option : /Zoff
fatal error A1017: missing source filename

ml "-Zs ""abc"
warning A4017: invalid command-line option : /Z "abc
warning A4017: invalid command-line option : /Z"abc
warning A4017: invalid command-line option : /Zabc
warning A4017: invalid command-line option : /Zbc
warning A4017: invalid command-line option : /Zc
fatal error A1017: missing source filename

ml "-Zs ""coff"
warning A4017: invalid command-line option : /Z "coff
warning A4017: invalid command-line option : /Z"coff
warning A4017: invalid command-line option : /Zcoff
warning A4017: invalid command-line option : /Zoff
fatal error A1017: missing source filename

ml "-Zs "cmdln/abc"
warning A4017: invalid command-line option : /Z cmdln/abc
warning A4017: invalid command-line option : /Zcmdln/abc
warning A4017: invalid command-line option : /Zln/abc
warning A4017: invalid command-line option : /Zn/abc
warning A4017: invalid command-line option : /Z/abc
warning A4017: invalid command-line option : /Zabc
warning A4017: invalid command-line option : /Zbc
warning A4017: invalid command-line option : /Zc
fatal error A1017: missing source filename

ml "-Zs "cmdln/coff"
warning A4017: invalid command-line option : /Z cmdln/coff
warning A4017: invalid command-line option : /Zcmdln/coff
warning A4017: invalid command-line option : /Zln/coff
warning A4017: invalid command-line option : /Zn/coff
warning A4017: invalid command-line option : /Z/coff
warning A4017: invalid command-line option : /Zcoff
warning A4017: invalid command-line option : /Zoff
fatal error A1017: missing source filename


==================== 并行


并行就是同时发生. 这事儿在现实中很复杂, 复杂到人脑不能模拟. 随便想象一下, 然后再想想有多少个大脑在想这事儿.
在计算机里, 两个并行的执行序列交换数据时需要共享或同步. 同一个共享位置, 同一时间只能有一个执行序列写入;
共享位置被读取时, 任何执行序列都不能写入; 这就是保证数据完整性. intel 因此制定了 cpu 对内存的原子操作, 

数据一致性说的是所有使用该数据的执行序列都能得知该数据的最新值. 这是个无法解决的问题. 假设执行序列要对 1 个值
进行 1 个 1 秒的操作, 这 1 秒或者任意时间内都没有道理去限制值的更改, 那么 1 秒操作在更改后的那部分时间内使用的
就是错误的数据. 有些数据一致性问题可以解决, 比如 cpu cache 能通过标记无效来保证各个缓存里数据的一致性.

而数据不一致是什么情况? 仔细想的话, 内存从来都是顺序写入, 不存在同时写入的问题. 数据不一致指的是这些情况: 执行序列
刚写入的数据被覆盖了而自己不知道; 大块内存需要多个写入, 这多个写入之间混入了其他执行序列的写入; 读取了需要多次写入
并且未写入完毕的区域.






当 lock prefix 放在规定的一组指令前, 且这些指令的目的操作数是内存时, 该指令独占该内存, 即该指令变为原子操作.

未搞清楚的问题: lock 时其他核心访问内存会发生啥? 指令的执行周期会由于等待而变长?

只有 读取-修改-写入 操作才能运用 lock 前缀?

lock 能锁缓存就不锁内存, 前者效率高

xchg 指令隐含 lock 前缀



memory fence, memory barrier

Memory ordering

compile-time reorder, runtime reorder

Memory ordering is the order of accesses to computer memory by a CPU. Memory ordering
depends on both the order of the instructions generated by the compiler at compile time
and the execution order of the CPU at runtime. 


### 单核 cpu 和其他设备并行

设备通过中断通知 cpu 有事情需要处理.

cpu 读取相应指令后和 x87, simd 单元也是并行执行, 据说 cpu 内置了同步逻辑所以基本不需要在代码里同步,
不知具体做法, 我看汇编后的代码几乎每句浮点指令前面都插入了 wait, 这总不能叫 “不需要在代码里同步” 吧?

### 多核 cpu 的各个核心

各核心共享 2, 3 级高速缓存和内存控制器.

intel 的超线程技术各线程共享的资源比多核 cpu 各核心共享的资源更多, 效率也就更低.

### numa 是一种多 cpu 架构

各个 cpu 有独占的内存, 它们还共享另一部分内存.


### 线程

线程是操作系统里的概念, 也是个执行序列. 多个线程可能运行于同一个 cpu (核心), 调度程序把时间分成小段,
每小段执行其中的 1 个线程. 虽然同一时间只有 1 个线程在执行, 但在一个时间段内, 可以看作这些线程并行执行,
这种广义的并行叫并发. 多个线程也可以放到多个 cpu (核心) 以真正的并行执行.

### openmp




==================== 杂项


## 变量

变量的概念可能已存在了数千年. 千年前的人可能没注意到变量的地址属性, 但当人开始用机器模仿大脑, 变量的地址属性就很明显了.
一张纸是不是变量? 纸上写字, 但字往往是划掉而不是擦掉, 最终会写满.

似乎数字总要保存在某个地方. 数字和保存数字的地方它俩是啥关系? 保存数字的地方能保存不同的数字, 当它不保存某个数字时那个数字在哪?
显然在另一个某个地方, 简单想的话该地方就是字面量, 不过一开始数字是怎么来的? 人脑中一开始应该不存在数字这个概念, 那数字一开始
是如何变成字面量, 然后给各种保存数字的地方赋值的?

## 没怎么发展的汇编语言

cpu 厂商创造的助记符语法都挺简洁

汇编在 8 位 和 16 位 cpu 的时候是常用语言, 好多汇编器创造了自己的语法; 后来就没怎么发展, 实乃幸运.
发展的语言加入的特性很多都是半成品, 为兼容旧语法又会制造别扭的新语法. 这些语言往往有个议会, 接受议员
的提案, 而各个语言的议员彼此交叠, 所以各个语言的新特性往往趋同; 又要兼容各自的旧语法; 结果就一次次看
到一个概念的各种丑陋实现.

##

`FXCH stX` makes the x87 stack usable as 7 addressable registers + 1 accumulator (st0)

搜索 x87 FXCH 时看到这本书《64位微处理器应用编程》, 作者 周明德, 似乎很贴合这里的主题, 就仔细看了看.
1. 看语言像是翻译的
2. 把 google 给的免费页数看完了 (39 ~ 88, 103 ~ 293 不在试看范围内), 没有一句编程

##

预处理 pp 缺啥？模式匹配？

##

##

##

##

##


==================== 翻译


我现在觉得把 call 翻译为调用很扯蛋, invoke 也翻译为调用, load 也可以说是调用. call 确实有调用的意思,
但就这么根据意思给英文加翻译, 那原本更符合的单词咋办? 或者英文里俩词同时出现, 汉语里是俩一样的词?
一词多义是 1 个词多个意思, 不是每个意思对应一个词; 这种翻译方式也做不到每个意思对应一个汉语, 只是占用其他词.

借调, 转调, 抽调, 调取, 这个 "调" 对应啥英文? 可能不对应英文, 但若对应, 就该对应相同的英文,
4 个词可以对应 4 个不同的英文, 同 1 个 "调" 字应该对应同 1 个英文.

我曾把 token 翻译为 "信物" 就是因为标记 (明显是 mark), 令牌 (莫名其妙但似乎可用) 都不理想, 但信物也不理想所以不翻译了.

以前不喜欢台湾的翻译, 现在看有许多是台湾的更好. 把 call 翻译为 "呼叫" 比翻译为 "调用" 强.







◇        ◆ ◇ ◆ ◇ ◆ ◇ ◆ ◇ ◆ ◇
◆        ◇ ◆ ◇ ◆ ◇ ◆ ◇ ◆ ◇ ◆
◇ ◆        ◇ ◆ ◇ ◆ ◇ ◆ ◇ ◆ ◇
◆ ◇        ◆ ◇ ◆ ◇ ◆ ◇ ◆ ◇ ◆
◇ ◆ ◇        ◆ ◇ ◆ ◇ ◆ ◇ ◆ ◇
◆ ◇ ◆        ◇ ◆ ◇ ◆ ◇ ◆ ◇ ◆
◇ ◆ ◇ ◆        ◇ ◆ ◇ ◆ ◇ ◆ ◇
◆ ◇ ◆ ◇        ◆ ◇ ◆ ◇ ◆ ◇ ◆

