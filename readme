

8086        16 位实模式, dos
cmdln       masm 命令行
copy        抄来的东西
iaie        intel 指令扩展
out         生成的文件
x64         保护模式, ring3, windows
learn       masm 概述
macros      masm 的宏
think       一些思考

欠缺的内容
x86/x64 protected mode ring0                            驱动程序?
8086/x86/x64 without os                                 如何编译是个问题, 在另外的系统里编译?
intel itanium architecture (formerly called IA-64)      这个还有必要吗? 我也没这 cpu 啊
gpu assembly programming                                masm 显然编译不了

==================== faq

? 为什么很多汇编代码的关键字都是大写?
! 汇编时代的文本编辑器没有语法高亮
- 键盘没有小写按键的时期
- masm 加入大量毫无章法的关键字时期, 这时候一般的语法高亮也没啥用了

==================== 在 64 位 windows 10 上写汇编程序

16      bits    dosbox 或者虚拟机, 用 masm 6.11 生成
32/64   bits    ml/ml64 生成运行

masm 的关键字分两种
1. cpu 规定的指令集的指令助记符
2. masm 规定的指示, 符号, 操作符

32/64 位 windows 的用户态代码只能执行 ring3 指令

分支, 跳转, 算术, 预定义函数

从哪里开始执行? 或者说入口地址是啥?
com 文件没有文件头, 入口地址固定是 100h; - 有些 com 是 exe 改了扩展名
exe 文件头记录连接器生成的入口地址, 连接器依据: 源文件中 end 指出的标签; link -entry 指出的标签; 第 1 条指令



==================== masm 和 c 的对比

macro of masm                   c
if, elseif, else, endif         #if, #elif, #else, #endif
ifdef , elseifdef               #ifdef , #if  defined, #elif  defined
ifndef, elseifndef              #ifndef, #if !defined, #elif !defined
ife, elseife                    <none>
textequ/macro *                 #define
<none>                          #undef
.err                            #error
.erre, .errnz                   <none>
.errdef, .errndef               <none>
*   c 的宏一行就够了, 因为可以用分号创建许多逻辑行; masm 的行是硬行, 创建单行宏和多行宏语法不同
    c 的宏只展开一次; masm 的宏一直展开到没有宏为止

only in macros                  c
ifb, elseifb                    <none>
ifnb, elseifnb
ifidn, elseifidn                <none>
ifidni, elseifidni
ifdif, elseifdif                <none>
ifdifi, elseifdifi
rest: vararg                    .../__VA_ARGS__
.errb, .errnb                   <none>
.erridn, .erridni               <none>
.errdif, .errdifi               <none>
<none 1>                        defined
<none 2>                        #s
<none 3>                        s1##s2
1 可以用宏函数实现
2 类似 masm 里随处可用的 %, % expr
3 类似 masm 里随处可用的 &, s1&&s2

with /Zm, OPTION M510 or OPTION SETIF2:TRUE
.err1, .err2

miscellaneous directives        c
echo                            #pragma message
include                         #include
includelib                      #pragma comment(lib)
<todo: find out>                ms: __pragma

==================== 其他细节

汇编出现的较早, 在 8, 16 位 cpu 时是常用语言, 此后用的人少了, 也就没怎么发展 (幸亏没怎么发展. 看看 js 发展成啥样了)
网上很多汇编的例子是 16 位的, 使用时要注意. 看到 /AT, /omf, .startup, org 100h, int 21h 基本就是 16 位 masm

实模式是 16 位
16 bit segment << 4 + 16 bit offset = 20 bit address
* 注意这个左移, 在当时的 16 位通用寄存器上做不到
为什么这么弄? 因为 8086, 80186 的地址线是 20 位, 可以访问的地址空间是 2 ^ 20 = 1 Mb, 于是 intel 就用两个 16 位数表示一个 20 位数
https://en.wikipedia.org/wiki/RAM_limit

32 位 cpu 的通用寄存器是 32 位, 可以保存 32 位地址. 下面是一些思考
- 32 位 cpu 寻址空间也是 32 位, 这次 intel 居然没弄出个 40 位的地址线... or doesn't it?
- - 不能苛求, 当时的硬件状况就是 16bit cpu 和 20bit memory
- - intel 的 pae Physical Address Extension 有 36 位地址线, 原因还是硬件状况 - pci hole
- - 每次都是硬件限制, 每次都是组合地址... 当然了, 不多, 共两次
- 假设 32 位 cpu 用于保存 offset 的寄存器是 16 位, 那仍可以用上面的 segment:offset 表示 32 位地址, 这时段寄存器 << 16
- 单看 segment:offset 绝对猜不到是 segment * 16 + offset, 这种写法主要是列出俩寄存器的值

保护模式是 32 位
段寄存器仍然是 16 位, 保存 selectors 表的索引, selector 保存
- base address of memory block
- size of memory block
- access rights (read, write, execute)
虚拟内存地址 effective address = base address + 32 bit offset   - 可疑

effective address -(au or mmu)-> physical address

x64 的段寄存器也是 16 位, 地址线 52 位

以下是我对寄存器别名的印象, 是否正确还要验证
- 由于寄存器别名, 代码里的寄存器可能对应好几个 cpu 寄存器
- 所有这些被别名的寄存器都不小于别名, 不大可能是多个小的寄存器组合成一个大的
- 段寄存器比如 gs, 代码里是 16 位, 实际上可能对应好几个 64 位寄存器? 或者只有通用寄存器有别名?

