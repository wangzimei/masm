
directive     指示
instruction   指令

p53 /p??? Using Simplified Segment Directives

简化段指示
.MODEL, .CODE, .CONST, .DATA, .DATA?, .FARDATA, .FARDATA?, .STACK, .STARTUP, .EXIT
简化段指示必须放 .model 后面.
.code, .data 结束前面的段, 开始新段; .stack 打开并关闭栈段, 不结束前面的段

下面是使用了简化段指示的 main module 的结构
- default processor: 8086
- end 结束前面的段, 标记源代码结束, 每个模块都必须用它结束

.MODEL small, c ; .model 要放在其它简化段指示前
.STACK          ; 使用默认的 1k 栈 - 这个默认指的是 .stack 的默认参数
.DATA           ; 开始数据段
                ; 这里放数据声明 (原文 data declarations, 其实是定义)
.CODE
.STARTUP        ; 生成启动代码
                ; 这里放指令
.EXIT           ; 生成退出代码
END

这 16 位代码我在 masm 14 上也编译了, 遇到下面错误
error A2006:undefined symbol : DGROUP
如果修改 .model 为 flat
error A2199:.STARTUP does not work with 32-bit segments
error A2198:.EXIT does not work with 32-bit segments

.MODEL memorymodel [[, modeloptions ]]

memorymodel         required
                    = tiny, small, compact, medium, large, huge, flat
                    tiny - produces com file, send /TINY to linker, file size < 64k
                        near code, near static data, can not override; can allocate far data at run
                    huge = large
                    flat - must be placed after .386+
                        near address, near pointer, similar to tiny but is 32 bit
                        cs = ds = es = ss = seg flat
                    @model
modeloptions
    language        sets calling and naming conventions for procedures and public symbols
                    = basic, c, fortran, pascal, syscall, stdcall
                    basic = fortran = pascal
                    c, syscall have same calling conv, diff naming conv
                    stdcall - used by windows api
                    proc, invoke, public, extern use naming conv
                    no language type in .model, option, extern, proc, invoke, proto causes error
                    @interface
    stack distance  = nearstack (default), farstack
                    nearstack - stack, data in 1 physical segment (dgroup)
                        .startup sets ss = ds; if not use .startup you must set it
                    farstack - stack does not grouped with dgroup, thus ss != ds
                        used by: tsr, dll
                    @stack

.model
- defines dgroup - 存疑

例子
.model small
.model large, c, farstack
.model medium, pascal

指定处理器和协处理器
处理器指示除了启用不同的指令集外还影响语言特点, 比如 .286 让 invoke 利用 80286 及更高的处理器才有的操作
(看到这里受不了骂了几句, 删了. 究竟啥操作也不说, 那干嘛提这茬?)

处理器
.8086 (默认), .186, .286, .386, .486 (由于 486 内置协处理器所以此指示同时启用协处理器指令)

处理器 - 特权指令, 比如 .286p = .286 + 286 特权指令
.286p, .386p, .486p

协处理器
.8087 (默认), .287, .387, .no87 (关闭协处理器指令)

栈段
.STACK 2048 ; Use 2K stack, default is 1024

数据段 - assume cs:error

.DATA   near, into dgroup, 64k in dos, 512m in winnt flat
.DATA?  near, into dgroup unless flat, microsoft place uninitialized var, c startup init them to 0
.CONST  near, into dgroup unless flat, microsoft place consts (string, ...) and floats

这些就不知所云了, 查了 msdn 文档才明白
@data       name of the default data group. flat: flat; other: dgroup
@datasize   TINY, SMALL, MEDIUM, FLAT: 0; COMPACT, LARGE: 1; HUGE: 2
@WordSize   当前段 word 的尺寸. 16 位段: 2; 32 位段: 4
@CurSeg     return name of the current segment - 这个应该能理解

The compact, large, and huge memory models use far data addresses by default
.FARDATA    far, into FAR_DATA
.FARDATA?   far, into FAR_BSS

代码段
@CodeSize   TINY, SMALL, COMPACT, FLAT (near): 0; MEDIUM, LARGE, HUGE (far): 1

.model                      default code seg    default code seg name
MEDIUM, LARGE, HUGE         far                 FILENAME_TEXT
TINY, SMALL, COMPACT, FLAT  near                _TEXT, thus concatenated by linker

.code name
- override default code seg name
- serveral code seg in 1 far file

.startup, .exit
- do not use them in flat
- .startup causes end to ingore it's arg - 指示可以修改任意代码, 不像宏仅限于自己那一块

.startup
    nearstack, .8086/.186       nearstack, .286+                farstack
    @Startup:                   @Startup:                       @Startup:
        mov dx, DGROUP              mov dx, DGROUP                  mov dx, DGROUP
        mov ds, dx                  mov ds, dx                      mov ds, dx
        mov bx, ss                  mov bx, ss
        sub bx, dx                  sub bx, dx
        shl bx, 1                   shl bx, 4
        shl bx, 1
        shl bx, 1
        shl bx, 1               ; 286+ 的 mov ss, pop ss
        cli                     ; 导致下一条指令忽略中断
        mov ss, dx                  mov ss, dx
        add sp, bx                  add sp, bx
        sti
        ...                         ...                             ...
    END @Startup                END @Startup                    END @Startup

.exit value         .exit
mov al, value
mov ah, 4Ch         mov ah, 4Ch
int 21h             int 21h




ch2/Using Full Segment Definitions

when write dos program without .MODEL and .STARTUP, you must
- initialize registers
- use the END directive to indicate the starting address

windows program
- no requirement

name SEGMENT [[align]] [[READONLY]] [[combine]] [[use]] [['class']]
statements
name ENDS

align       BYTE, WORD, DWORD, PARA (default, 16 bytes), PAGE (256 byte)
readonly    静态检查, 写入该段引发编译错误
combine     PRIVATE (默认, 不和其它文件的段合并), PUBLIC, STACK (合为栈), COMMON (合出来的大小 = 参与合并中最大的大小),
            MEMORY = PUBLIC, AT <address> (can not be used in protected-mode)
use (386+)  USE16, USE32, FLAT
class       linker 把类名相同的段放一组, 运行于同一块内存

段可以嵌套

SEGMENT 后面是可选的类型, 顺序任意. 同名段可以在一个模块内多次出现, 后续只能写名字, 不能修改之前的定义

linker 合并所有文件中的同名, 合并类型不是 PRIVATE 的段


p71 /p46    ch2/Defining Segment Groups

name GROUP segment [[, segment]]...

group 语句可以追加段, 段可以定义在 group 语句之后, 一个段只能在一个组里, 组不能同时包含 16 位和 32 位段


Setting Segment Order with Class Type

前面说了半天 "linker 合并同名的段", 这里说, 名字相同类名不同的段不合并

linker 把类名相同的段挨着放入 exe, 同类名的段的顺序取决于 linker 看到它们的顺序
linker 看的是 obj, 下面 3 个指定 obj 中段的顺序
.SEQ    默认, 按源文件中声明的顺序
.ALPHA  按字母序, 用于兼容老的 ibm 汇编器; 如果运行老的汇编书里的代码有问题, 使用这个
.DOSSEG
    code segments
    data segments not in class BSS or STACK
    data segments class BSS 
    data segments class STACK






